// üìÅ backend/src/dashboard/dashboard.gateway.ts - CORREGIDO
import {
  WebSocketGateway,
  WebSocketServer,
  SubscribeMessage,
  MessageBody,
  ConnectedSocket,
  OnGatewayConnection,
  OnGatewayDisconnect,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { Injectable, UseGuards, Inject, forwardRef } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { ConfigService } from '@nestjs/config'; // ‚úÖ AGREGAR ConfigService
import { ElectionsService } from '../elections/elections.service';

@Injectable()
@WebSocketGateway({
  cors: {
    origin: process.env.CORS_ORIGIN || 'http://localhost:3001',
    credentials: true,
  },
  namespace: '/dashboard',
})
export class DashboardGateway implements OnGatewayConnection, OnGatewayDisconnect {
  notifyNewVote(id_eleccion: number) {
    throw new Error('Method not implemented.');
  }
  @WebSocketServer()
  server: Server;

  private connectedClients = new Map<string, { socket: Socket; user: any }>();

  constructor(
    private jwtService: JwtService,
    private configService: ConfigService, // ‚úÖ INYECTAR ConfigService
    @Inject(forwardRef(() => ElectionsService))
    private electionsService: ElectionsService,
  ) {}

  async handleConnection(client: Socket) {
    try {
      console.log('üîå Nueva conexi√≥n WebSocket:', client.id);
      
      // ‚úÖ MEJORAR extracci√≥n del token
      let token = client.handshake.auth?.token;
      
      if (!token) {
        // Intentar extraer del header Authorization
        const authHeader = client.handshake.headers.authorization;
        if (authHeader && authHeader.startsWith('Bearer ')) {
          token = authHeader.split(' ')[1];
        }
      }
      
      if (!token) {
        console.log('‚ùå Cliente sin token intentando conectar');
        client.emit('error', { message: 'Token requerido' });
        client.disconnect();
        return;
      }

      console.log('üîë Token recibido, verificando...');

      // ‚úÖ VERIFICAR token manualmente con el secret correcto
      const jwtSecret = this.configService.get<string>('JWT_SECRET');
      
      if (!jwtSecret) {
        console.error('‚ùå JWT_SECRET no configurado en variables de entorno');
        client.emit('error', { message: 'Error de configuraci√≥n del servidor' });
        client.disconnect();
        return;
      }

      console.log('üîê JWT_SECRET encontrado, verificando token...');

      // ‚úÖ USAR verifyAsync con opciones expl√≠citas
      const payload = await this.jwtService.verifyAsync(token, {
        secret: jwtSecret,
        ignoreExpiration: false,
      });
      
      console.log('‚úÖ Token verificado para usuario:', payload.nombre_completo, 'Rol:', payload.rol);
      
      // ‚úÖ VERIFICAR que el usuario tiene permisos para el dashboard
      if (!['ADMIN', 'DASHBOARD', 'MESA_VOTACION'].includes(payload.rol)) {
        console.log(`‚ùå Usuario con rol ${payload.rol} intentando acceder al dashboard`);
        client.emit('error', { message: 'No tienes permisos para acceder al dashboard' });
        client.disconnect();
        return;
      }

      this.connectedClients.set(client.id, { socket: client, user: payload });
      
      // ‚úÖ UNIR A SALAS SEG√öN ROL
      if (payload.rol === 'ADMIN') {
        client.join('admin-dashboard');
        client.join('full-access'); // Acceso completo
        console.log(`üë§ Admin ${payload.nombre_completo} conectado`);
      } else if (payload.rol === 'DASHBOARD') {
        client.join('dashboard-only'); // Solo dashboard en tiempo real
        client.join('full-access'); // Tambi√©n acceso completo para ver todo
        console.log(`üìä Usuario Dashboard ${payload.nombre_completo} conectado`);
      } else if (payload.rol === 'MESA_VOTACION') {
        client.join(`mesa-${payload.sede_id || 'general'}`);
        console.log(`üó≥Ô∏è Mesa de votaci√≥n ${payload.nombre_completo} conectada`);
      }

      console.log(`‚úÖ Cliente conectado exitosamente: ${client.id} - Rol: ${payload.rol} - Usuario: ${payload.nombre_completo}`);
      
      // ‚úÖ CONFIRMAR conexi√≥n al cliente
      client.emit('connection-confirmed', {
        message: 'Conectado exitosamente',
        userId: payload.id_usuario,
        role: payload.rol,
        timestamp: new Date().toISOString(),
      });
      
      // Enviar estad√≠sticas iniciales
      await this.sendInitialStats(client, payload.rol);
      
    } catch (error) {
      console.error('‚ùå Error en conexi√≥n WebSocket:', error);
      
      // ‚úÖ ENVIAR error espec√≠fico al cliente
      if (error.name === 'JsonWebTokenError') {
        client.emit('error', { message: 'Token inv√°lido' });
      } else if (error.name === 'TokenExpiredError') {
        client.emit('error', { message: 'Token expirado' });
      } else {
        client.emit('error', { message: 'Error de autenticaci√≥n' });
      }
      
      client.disconnect();
    }
  }

  handleDisconnect(client: Socket) {
    const clientData = this.connectedClients.get(client.id);
    if (clientData) {
      console.log(`üëã Cliente desconectado: ${client.id} - ${clientData.user.nombre_completo}`);
    }
    this.connectedClients.delete(client.id);
  }

  // ‚úÖ NUEVO: Manejar solicitud de estado de conexi√≥n
  @SubscribeMessage('get-connection-status')
  handleGetConnectionStatus(@ConnectedSocket() client: Socket) {
    const clientData = this.connectedClients.get(client.id);
    if (clientData) {
      client.emit('connection-status', {
        connected: true,
        user: clientData.user.nombre_completo,
        role: clientData.user.rol,
        timestamp: new Date().toISOString(),
        totalConnections: this.connectedClients.size,
      });
    }
  }

  @SubscribeMessage('join-election-room')
  async handleJoinElectionRoom(
    @ConnectedSocket() client: Socket,
    @MessageBody() data: { electionId: number },
  ) {
    const clientData = this.connectedClients.get(client.id);
    if (!clientData) return;

    const room = `election-${data.electionId}`;
    client.join(room);
    
    console.log(`üìä Cliente ${client.id} unido a sala de elecci√≥n ${data.electionId}`);
    
    try {
      const electionStats = await this.electionsService.getElectionStats(data.electionId);
      client.emit('election-stats', electionStats);
    } catch (error) {
      console.error('Error obteniendo estad√≠sticas de elecci√≥n:', error);
      client.emit('error', { message: 'Error obteniendo datos de la elecci√≥n' });
    }
  }

  @SubscribeMessage('leave-election-room')
  handleLeaveElectionRoom(
    @ConnectedSocket() client: Socket,
    @MessageBody() data: { electionId: number },
  ) {
    const room = `election-${data.electionId}`;
    client.leave(room);
    console.log(`üìä Cliente ${client.id} sali√≥ de la sala de elecci√≥n ${data.electionId}`);
  }

  // ‚úÖ M√âTODO para enviar estad√≠sticas iniciales
  private async sendInitialStats(client: Socket, userRole: string) {
    try {
      console.log(`üìà Enviando estad√≠sticas iniciales para rol: ${userRole}`);
      
      // Obtener elecciones activas
      const activeElections = await this.electionsService.getActiveElections();
      
      // ‚úÖ DATOS B√ÅSICOS para todos los roles
      const dashboardData = {
        activeElections: activeElections.length,
        elections: activeElections.map(election => ({
          id: election.id_eleccion,
          titulo: election.titulo,
          estado: election.estado,
          fecha_inicio: election.fecha_inicio,
          fecha_fin: election.fecha_fin,
          estadisticas: {
            total_votos: 0, // Se calcular√° en tiempo real
            participacion_porcentaje: 0,
            total_votantes_habilitados: 0,
            votos_por_candidato: [],
          }
        })),
        timestamp: new Date().toISOString(),
      };

      console.log(`üìä Enviando datos iniciales:`, {
        elecciones: dashboardData.activeElections,
        usuario_rol: userRole
      });

      client.emit('initial-dashboard-data', dashboardData);
      
    } catch (error) {
      console.error('‚ùå Error al enviar estad√≠sticas iniciales:', error);
      client.emit('error', { message: 'Error obteniendo datos iniciales' });
    }
  }

  // ‚úÖ M√âTODO para broadcastear actualizaciones de votos
  async broadcastVoteUpdate(electionId: number, voteData: any) {
    try {
      const update = {
        electionId,
        stats: voteData,
        timestamp: new Date().toISOString(),
      };

      // Enviar a todos los usuarios con acceso completo
      this.server.to('full-access').emit('new-vote', update);
      
      // Tambi√©n enviar a la sala espec√≠fica de la elecci√≥n
      this.server.to(`election-${electionId}`).emit('new-vote', update);
      
      console.log(`üì¢ Actualizaci√≥n de voto broadcasted para elecci√≥n ${electionId}`);
      
    } catch (error) {
      console.error('‚ùå Error broadcasting voto:', error);
    }
  }

  // ‚úÖ M√âTODO para enviar alertas dirigidas
  async sendAlert(
    message: string, 
    type: 'info' | 'warning' | 'error' = 'info', 
    targetRoles: string[] = ['ADMIN', 'DASHBOARD']
  ) {
    const alert = {
      message,
      type,
      timestamp: new Date().toISOString(),
    };

    // Enviar a roles espec√≠ficos
    if (targetRoles.includes('ADMIN')) {
      this.server.to('admin-dashboard').emit('alert', alert);
    }
    
    if (targetRoles.includes('DASHBOARD')) {
      this.server.to('dashboard-only').emit('alert', alert);
    }

    console.log(`üö® Alerta enviada: ${message} (${type}) - Roles: ${targetRoles.join(', ')}`);
  }

  // ‚úÖ M√âTODO para obtener estad√≠sticas de conexiones
  getConnectionStats() {
    const connections = Array.from(this.connectedClients.values());
    const roleStats = connections.reduce((acc, { user }) => {
      acc[user.rol] = (acc[user.rol] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    return {
      totalConnections: connections.length,
      roleBreakdown: roleStats,
      timestamp: new Date().toISOString(),
    };
  }
}