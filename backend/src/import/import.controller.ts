import {
  Controller,
  Post,
  UseInterceptors,
  UploadedFile,
  Body,
  Get,
  BadRequestException,
  Logger,
} from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';
import { ImportService } from './import.service';
import { ImportResultDto } from './dto/import-result.dto';

@Controller('import')
export class ImportController {
  private readonly logger = new Logger(ImportController.name);

  constructor(private readonly importService: ImportService) {}

  // üîß VALIDACI√ìN M√ÅS FLEXIBLE Y PERMISIVA
  private validateExcelFile(file: Express.Multer.File): void {
    const allowedMimeTypes = [
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx
      'application/vnd.ms-excel', // .xls
      'application/octet-stream', // üîß Agregar para manejar uploads sin MIME correcto
    ];

    const allowedExtensions = ['.xlsx', '.xls'];
    const fileExtension = file.originalname.toLowerCase().slice(file.originalname.lastIndexOf('.'));

    this.logger.log(`üìÅ Validando archivo: ${file.originalname}`, {
      filename: file.originalname,
      mimetype: file.mimetype,
      extension: fileExtension,
      size: file.size
    });

    // Validar tama√±o (aumentado a 25MB para archivos grandes)
    if (file.size > 25 * 1024 * 1024) {
      throw new BadRequestException('El archivo es demasiado grande. M√°ximo 25MB permitido.');
    }

    // Validar que hay contenido
    if (file.size < 100) {
      throw new BadRequestException('El archivo parece estar vac√≠o o corrupto.');
    }

    // Validar extensi√≥n (cr√≠tico)
    if (!allowedExtensions.includes(fileExtension)) {
      throw new BadRequestException(
        `Extensi√≥n de archivo no v√°lida. Solo se permiten: ${allowedExtensions.join(', ')}`
      );
    }

    // üîß MIME type m√°s permisivo - solo advertencia
    if (!allowedMimeTypes.includes(file.mimetype)) {
      this.logger.warn(`‚ö†Ô∏è MIME type inusual detectado: ${file.mimetype}, pero se permite por extensi√≥n`);
    }

    this.logger.log('‚úÖ Archivo validado correctamente');
  }

  @Post('excel/aprendices')
  @UseInterceptors(FileInterceptor('file'))
  async importAprendicesFromExcel(
    @UploadedFile() file: Express.Multer.File,
    @Body() body: any // üîß Usar any para recibir opciones flexibles
  ): Promise<ImportResultDto> {
    this.logger.log('üóÇÔ∏è Iniciando importaci√≥n de aprendices desde Excel');

    if (!file) {
      throw new BadRequestException('No se ha proporcionado ning√∫n archivo');
    }

    // Validaci√≥n custom m√°s permisiva
    this.validateExcelFile(file);
    
    // üîß OPCIONES FLEXIBLES CON VALORES POR DEFECTO PERMISIVOS
    const options = {
      validateFichas: body.validateFichas === 'true' || body.validateFichas === true || false,
      createMissingFichas: body.createMissingFichas === 'true' || body.createMissingFichas === true || true,
      updateExisting: body.updateExisting === 'true' || body.updateExisting === true || false,
      skipDuplicates: body.skipDuplicates === 'true' || body.skipDuplicates === true || true,
      flexibleValidation: body.flexibleValidation === 'true' || body.flexibleValidation === true || true,
    };

    this.logger.log('üîß Opciones de importaci√≥n:', options);
    
    try {
      const result = await this.importService.importAprendicesFromExcel(file, options);
      
      this.logger.log('‚úÖ Importaci√≥n completada:', {
        success: result.success,
        imported: result.importedRecords,
        errors: result.errors?.length || 0,
        warnings: result.warnings?.length || 0
      });
      
      return result;
      
    } catch (error) {
      this.logger.error('‚ùå Error durante la importaci√≥n:', error);
      throw new BadRequestException({
        message: 'Error durante la importaci√≥n',
        details: error.message,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      });
    }
  }

  @Post('excel/preview')
  @UseInterceptors(FileInterceptor('file'))
  async previewExcelImport(@UploadedFile() file: Express.Multer.File) {
    this.logger.log('üëÅÔ∏è Generando preview de importaci√≥n Excel');
    
    if (!file) {
      throw new BadRequestException('No se ha proporcionado ning√∫n archivo');
    }
    
    // Validaci√≥n custom m√°s permisiva
    this.validateExcelFile(file);
    
    try {
      const preview = await this.importService.previewExcelImport(file);
      
      this.logger.log('‚úÖ Preview generado:', {
        sheets: preview.resumen?.fichas?.length || 0,
        totalRecords: preview.resumen?.totalRegistros || 0,
        errors: preview.resumen?.totalErrores || 0
      });
      
      return preview;
      
    } catch (error) {
      this.logger.error('‚ùå Error generando preview:', error);
      throw new BadRequestException({
        message: 'Error generando preview del archivo',
        details: error.message
      });
    }
  }

  @Get('history')
  async getImportHistory() {
    try {
      return await this.importService.getImportHistory();
    } catch (error) {
      this.logger.error('‚ùå Error obteniendo historial:', error);
      throw new BadRequestException('Error obteniendo historial de importaciones');
    }
  }

  @Get('templates/excel')
  async downloadExcelTemplate() {
    try {
      const template = await this.importService.generateExcelTemplate();
      
      return {
        filename: template.filename,
        buffer: template.buffer,
        headers: {
          'Content-Type': template.contentType,
          'Content-Disposition': `attachment; filename="${template.filename}"`
        }
      };
    } catch (error) {
      this.logger.error('‚ùå Error generando plantilla:', error);
      throw new BadRequestException('Error generando plantilla Excel');
    }
  }

  // üîß NUEVO ENDPOINT: Estad√≠sticas de tipos de documento
  @Get('stats/document-types')
  async getDocumentTypeStats() {
    try {
      return await this.importService.getDocumentTypeStatistics();
    } catch (error) {
      this.logger.error('‚ùå Error obteniendo estad√≠sticas:', error);
      throw new BadRequestException('Error obteniendo estad√≠sticas de tipos de documento');
    }
  }
}